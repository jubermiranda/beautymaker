package com.doo.finalActv.beautymaker.ui;

import com.doo.finalActv.beautymaker.exception.UserNotFoundException;
import com.doo.finalActv.beautymaker.model.Client;
import com.doo.finalActv.beautymaker.model.Employee;
import com.doo.finalActv.beautymaker.model.NotificationType;
import com.doo.finalActv.beautymaker.model.User;
import com.doo.finalActv.beautymaker.serivce.db.DatabaseManager;
import com.doo.finalActv.beautymaker.serivce.event.EventManager;
import com.doo.finalActv.beautymaker.serivce.event.model.MenuItemSelectedEvent;
import com.doo.finalActv.beautymaker.serivce.event.model.NotificationEvent;
import com.doo.finalActv.beautymaker.serivce.event.model.RequestLoginEvent;
import com.doo.finalActv.beautymaker.serivce.event.model.RequestSignupEvent;
import com.doo.finalActv.beautymaker.session.SessionManager;
import com.doo.finalActv.beautymaker.ui.customComponents.NotificationPanel;
import java.awt.Dimension;
import java.time.LocalDate;
import java.util.EnumMap;
import javax.swing.JInternalFrame;

public class MainWindow extends javax.swing.JFrame {

  private enum AppView {
    LOGIN,
    SIGNUP,
    HOME
  };

  private final EventManager eventManager = EventManager.getInstance();
  private final SessionManager sessionManager = SessionManager.getInstance();
  private EnumMap<AppView, JInternalFrame> views;
  private AppView currentView;

  public MainWindow() {
    initComponents();
    this.mockLogin();

    this.startApplication();
    //this.showLoginView();

    this.showHomeView();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jDesktopPane1 = new javax.swing.JDesktopPane();
    notificationPanel = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    notificationPanel.setEnabled(false);
    notificationPanel.setFocusable(false);
    notificationPanel.setOpaque(false);

    javax.swing.GroupLayout notificationPanelLayout = new javax.swing.GroupLayout(notificationPanel);
    notificationPanel.setLayout(notificationPanelLayout);
    notificationPanelLayout.setHorizontalGroup(
      notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 300, Short.MAX_VALUE)
    );
    notificationPanelLayout.setVerticalGroup(
      notificationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 1068, Short.MAX_VALUE)
    );

    jDesktopPane1.setLayer(notificationPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
    jDesktopPane1.setLayout(jDesktopPane1Layout);
    jDesktopPane1Layout.setHorizontalGroup(
      jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
        .addContainerGap(1614, Short.MAX_VALUE)
        .addComponent(notificationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jDesktopPane1Layout.setVerticalGroup(
      jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jDesktopPane1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(notificationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jDesktopPane1)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jDesktopPane1)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JDesktopPane jDesktopPane1;
  private javax.swing.JPanel notificationPanel;
  // End of variables declaration//GEN-END:variables

  private void startApplication() {
    this.views = new EnumMap<>(AppView.class);
    this.setupServices();
  }

  private void showLoginView() {
    this.currentView = AppView.LOGIN;
    this.updateView();
  }

  private void showHomeView() {
    this.currentView = AppView.HOME;
    this.updateView();
  }

  private void showNotification(String title, String message, NotificationType type) {
    NotificationPanel notif = new NotificationPanel(title, message, notificationPanel, type);

    int yOffset = 10 + notificationPanel.getComponentCount() * 110;
    notif.setBounds(10, yOffset, 303, 100);
    notificationPanel.repaint();

    notificationPanel.add(notif);
    notificationPanel.revalidate();
  }

  private void updateView() {
    if (this.views == null || this.currentView == null) {
      System.err.println("Views or current view is not initialized.");
      return;
    }

    for (JInternalFrame view : this.views.values()) {
      view.setVisible(false);
    }

    JInternalFrame target = this.getCrrFrame();
    if (target == null) {
      System.err.println("Failed to create view for: " + this.currentView);
      return;
    }

    target.setVisible(true);
    target.toFront();
  }

  private JInternalFrame getCrrFrame() {
    JInternalFrame target = this.views.computeIfAbsent(
            this.currentView,
            this::createFrame
    );

    return target;
  }

  private JInternalFrame createFrame(AppView view) {
    JInternalFrame result;
    switch (view) {
      case LOGIN:
        result = new LoginView();
        break;
      case SIGNUP:
        //TODO
        result = null;
        break;
      case HOME:
        result = this.createApropriateHomeView();
        break;
      default:
        result = null;
        break;
    }

    if (result != null) {
      if (!(result instanceof BaseHomeView)) {
        this.centralizeFrame(result);
      }

      jDesktopPane1.add(result);
    }
    return result;
  }

  private JInternalFrame createApropriateHomeView() {
    User user = this.sessionManager.getUser();

    if (user instanceof Client) {
      return new ClientHomeView();
    } else if (user instanceof Employee) {
      return new EmployeeHomeView();

    } else {
      System.err.println("Unknown user type: " + user.getClass().getSimpleName());
      return null;
    }
  }

  private void centralizeFrame(JInternalFrame frame) {
    if (frame == null) {
      return;
    }

    Dimension deskSize = jDesktopPane1.getSize();
    Dimension frameSize = frame.getSize();
    int centerX = deskSize.width / 2;
    int centerY = deskSize.height / 2;
    int x = (Math.max(0, centerX - (frameSize.width / 2)));
    int y = (Math.max(0, centerY - (frameSize.height / 2)));
    frame.setLocation(x, y);
  }

  private void setupServices() {
    this.setupNotificationService();
  }

  private void setupNotificationService() {
    EventManager.getInstance().subscribe(NotificationEvent.class, event -> {
      this.showNotification(
              event.title,
              event.message,
              event.type
      );
    });
  }

  private void mockLogin() {
    String testUserName = "testUser";
    String testUserEmail = "user_test@email.com";
    char[] testPassword = "testPassword123".toCharArray();
    LocalDate testBirthDate = LocalDate.of(1990, 1, 1);

    try {
      DatabaseManager.getUser(testUserEmail, testPassword);

      EventManager.getInstance().publish(new RequestLoginEvent(
              testUserEmail,
              testPassword
      ));
    } catch (Exception e) {
      if (e instanceof UserNotFoundException) {

        // exemple of how to trigger the signup event (if user does not exist)
        EventManager.getInstance().publish(new RequestSignupEvent(
                testUserName,
                testUserEmail,
                testUserEmail,
                testPassword,
                testPassword,
                testBirthDate
        ));
      } else {
        e.printStackTrace();
      }
    }
  }
}

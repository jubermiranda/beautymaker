package com.doo.finalActv.beautymaker.ui.client.cards;

import com.doo.finalActv.beautymaker.model.StaffData;
import java.awt.Color;
import java.awt.Component;
import java.time.temporal.ChronoUnit;
import javax.swing.JLabel;

// TODO: use AppointmentElementCard as a base class

public class StaffCard extends AppointmentElementCard<StaffData> {

  public StaffCard(StaffData staffData) {
    super(staffData);
    initComponents();

    this.initialize();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    nameField = new javax.swing.JLabel();
    experienceField = new javax.swing.JLabel();
    ratingPanel = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();

    setBackground(new java.awt.Color(204, 204, 204));
    setMaximumSize(new java.awt.Dimension(580, 200));
    setMinimumSize(new java.awt.Dimension(580, 200));

    nameField.setForeground(new java.awt.Color(0, 0, 0));

    experienceField.setForeground(new java.awt.Color(0, 0, 0));
    experienceField.setText("Experience:");

    ratingPanel.setOpaque(false);
    ratingPanel.setLayout(new java.awt.GridBagLayout());

    jLabel1.setForeground(new java.awt.Color(0, 0, 0));
    jLabel1.setText("Rate:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(experienceField, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ratingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(experienceField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(ratingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
        .addContainerGap(19, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel experienceField;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel nameField;
  private javax.swing.JPanel ratingPanel;
  // End of variables declaration//GEN-END:variables

  private void initialize() {
    nameField.setText(((StaffData) super.element).name); 
    experienceField.setText("Experience: " + this.getFormattedExperience());
    this.configureRatingPanel();

    this.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK, 2));
    this.setAlignmentX(Component.CENTER_ALIGNMENT);
  }

  private String getFormattedExperience() {
    int years = (int) java.time.temporal.ChronoUnit.YEARS.between(
        ((StaffData) super.element).experience,
        java.time.LocalDate.now()
    );
    int remaningMonths = (int) ChronoUnit.MONTHS.between(
        ((StaffData) super.element).experience.plusYears(years), java.time.LocalDate.now()
    );

    String result = years + " year(s)";
    if (remaningMonths > 0) {
      result += " and " + remaningMonths + " month(s)"; 
    }
    return result;
  }

  private void configureRatingPanel() {
    ratingPanel.removeAll();
    StaffData staffData = (StaffData) super.element;

    if (staffData.ratingCount == 0) {
      JLabel message = new JLabel("Not rated yet");
      ratingPanel.add(message);
    } else {
      // TODO : Implement a visual representation of the rating
      String ratingMessage = (
          "★".repeat((int) staffData.rating) +
          "☆".repeat(5 - (int) staffData.rating) +
          " (" + String.format("%.1f", staffData.rating) + 
          " - " +
          staffData.ratingCount + " ratings)"
      );

      JLabel ratingLabel = new JLabel(ratingMessage);
      ratingPanel.add(ratingLabel);
    }
    
    ratingPanel.revalidate();
    ratingPanel.repaint();
  }

}
